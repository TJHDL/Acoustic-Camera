/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "ov7670.h"
#include "sccb/sccb_ctrl.h"
#include "xaxivdma.h"
#include "sleep.h"
#include "xil_io.h"
#include "xil_cache.h"

#define VIDEO_HORISZIE 640
#define VIDEO_VERTSIZE 480


#define VIDEO_FRAMESIZE VIDEO_HORISZIE*VIDEO_VERTSIZE

u32 destAddr = (XPAR_PS7_DDR_0_S_AXI_BASEADDR + 0x10000000);



static XAxiVdma vdma;
XAxiVdma_Config *vdmaCfg;
XAxiVdma_DmaSetup *vdamSetup;

int vdmaInit(){
	int status = 0;
	vdmaCfg = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
	if(vdmaCfg == NULL){
		printf("No vdma device found!\n");
		return -1;
	}
	status = XAxiVdma_CfgInitialize(&vdma,vdmaCfg,vdmaCfg->BaseAddress);
	if(status != XST_SUCCESS){
		printf("Vdma initialization failed!\n");
		return XST_FAILURE;
	}

	vdamSetup->HoriSizeInput = VIDEO_HORISZIE * 3;//(vdmaCfg->Mm2SStreamWidth>>3);
	vdamSetup->VertSizeInput = VIDEO_VERTSIZE;

	vdamSetup->Stride =  VIDEO_HORISZIE * 4;
	vdamSetup->FrameDelay = 0;

	vdamSetup->EnableCircularBuf = 1;
	vdamSetup->EnableSync = 1;

	vdamSetup->PointNum = 0;
	vdamSetup->EnableFrameCounter = 0;

	vdamSetup->FixedFrameStoreAddr = 0;
	vdamSetup->FrameStoreStartAddr[0] = destAddr;

	status = XAxiVdma_DmaConfig(&vdma, XAXIVDMA_WRITE, vdamSetup);
	if (status != XST_SUCCESS) {
		printf("Write channel config failed %d\r\n", status);
		return XST_FAILURE;
	}
    status = XAxiVdma_DmaConfig(&vdma, XAXIVDMA_READ, vdamSetup);
	if (status != XST_SUCCESS) {
		printf("Read channel config failed %d\r\n", status);
		return XST_FAILURE;
	}

	u32 Addr = destAddr;
	for(int i = 0; i < vdmaCfg->MaxFrameStoreNum ; ++i ){
		vdamSetup->FrameStoreStartAddr[i] = Addr;
		Addr += (vdamSetup->Stride) * (vdamSetup->VertSizeInput);
	}

	status = XAxiVdma_DmaSetBufferAddr(&vdma,XAXIVDMA_WRITE,vdamSetup->FrameStoreStartAddr);
	if (status != XST_SUCCESS) {
		printf("Write channel set buffer address failed %d\r\n",status);
		return XST_FAILURE;
	}
    status = XAxiVdma_DmaSetBufferAddr(&vdma,XAXIVDMA_READ,vdamSetup->FrameStoreStartAddr);
	if (status != XST_SUCCESS) {
		printf("Write channel set buffer address failed %d\r\n",status);
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

void bkgInit(){
	u8* addr = (u8*)destAddr;
	for(int j = 0;j<480*3;j++){
		addr += 640*4;
		for(int i = 0;i<640*3;i+=3){
				addr[i+2] = 0x00;//r
				addr[i+1] = 0xff;//g
				addr[i] = 0x00 ;//b
			}
	}
	printf("init data\n");
    Xil_DCacheFlushRange((INTPTR)destAddr, VIDEO_FRAMESIZE*4*sizeof(u8));
}

int main()
{
    init_platform();
    EMIO_SCCB_init();
    bkgInit();
    OV7670_Init();

    vdmaInit();

    int status = 0;
    status = XAxiVdma_DmaStart(&vdma, XAXIVDMA_WRITE);
	if(status){
		printf("vdma write start error %d !\n",status);
		return -1 ;
	}
    status = XAxiVdma_DmaStart(&vdma, XAXIVDMA_READ);
	if(status){
		printf("vdma read start error %d !\n",status);
		return -1 ;
	}
	Xil_DCacheInvalidateRange((INTPTR)destAddr, VIDEO_FRAMESIZE*4*sizeof(u8));

	u8* addr = (u8*)destAddr;
	for(int j = 0;j<10;j++){
		addr += 640*4;
		for(int i = 0;i<640*3;i+=3){
			//printf("%02x%02x%02x \t",addr[i],addr[i+1],addr[i+2]);
			//if(i%9==0&&i) printf("\n");
			//if(i%9==0) printf("addr:%d - %d\n",640*j+i+3,640*j+i+5);
		}
		//printf("init data\n");
	}

    while(1){
        printf("WRITE status:%x\n",(uint)XAxiVdma_GetStatus(&vdma,XAXIVDMA_WRITE));
        printf("READ status:%x\n",(uint)XAxiVdma_GetStatus(&vdma,XAXIVDMA_READ));
        sleep(1);
    }
    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
